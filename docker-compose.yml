services:
  backend:
    container_name: "manga_backend"
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - 8000:8000
    volumes:
      - ./media:/media
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    networks:
       - manga_net

  db:
    image: postgres
    container_name: 'manga_db'
    restart: always
    shm_size: 128mb
    ports:
      - 5431:5432
    volumes:
      - ./postgres_data:/data/postgres
    environment:
      POSTGRES_USER: manga
      POSTGRES_PASSWORD: manga
      POSTGRES_DB: manga
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d postgres" ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
       - manga_net

  redis:
    image: redis:7.4-alpine
    container_name: 'manga_redis'
    restart: always
    volumes: 
      - ./cache:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
    networks:
       - manga_net

  celery_worker:
    container_name: "manga_celery_worker"
    build:
      context: .
      dockerfile: Dockerfile
    image: celery_worker
    command: "celery --app=src.tasks.celery:celery_app worker -l INFO"
    env_file:
      - .env
    depends_on:
      - backend
    networks:
       - manga_net

  celery_beat:
    container_name: "manga_celery_beat"
    build:
      context: .
      dockerfile: Dockerfile
    command: "celery --app=src.tasks.celery:celery_app beat -l INFO"
    env_file:
      - .env
    depends_on:
      - backend
    networks:
       - manga_net

  flower:
    container_name: "manga_flower"
    build:
      context: .
      dockerfile: Dockerfile
    command: "celery --app=src.tasks.celery:celery_app flower --port=5555"
    env_file:
      - .env
    ports:
      - 5555:5555
    depends_on:
      - backend
    networks:
       - manga_net

networks:
   manga_net:
    name: manga_net